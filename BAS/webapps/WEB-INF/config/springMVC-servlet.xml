<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/aop     
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd     
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd     
        http://www.springframework.org/schema/context     
        http://www.springframework.org/schema/context/spring-context-4.0.xsd     
        http://www.springframework.org/schema/mvc     
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd     
        http://www.springframework.org/schema/tx     
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">


	<!-- 解决json乱码问题-放在最前否则没作用start by zhoulei  start-->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean"/>
	<!-- 解析Json @ResponseBody -->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>
	<!-- 这个类里面你可以注册拦截器什么的 -->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<!-- <ref bean="jacksonMessageConverter" /> -->  		  
				<!-- 注册JSON Converter -->
				<!-- <ref bean="stringHttpMessageConverter" /> --> 
				<bean class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>application/json;charset=UTF-8</value>
						</list>
					</property>
				</bean>
				<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" >
					<property name="supportedMediaTypes">
						<list>
							<value>text/json;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
		<property name="webBindingInitializer">
			<bean class="com.hibo.bas.spring.ExtendsConfigurableWebBindingInitializer">
				<property name="conversionService" ref="conversionService"/>
        		<property name="validator" ref="validator"/>
			</bean>
		</property>
	</bean>
	<!-- 解决json乱码问题-放在最前否则没作用start by zhoulei  end-->
	
	<!-- 非WEB-INF下的目录，jsp URL不拦截，其他文件都拦截，mvc:resources 目录除外，但要注意 shiro的安全拦截 -->
	<context:component-scan base-package="com.hibo.*.*.controller" />
	
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:viewClass="org.springframework.web.servlet.view.JstlView" 
		p:prefix="/WEB-INF/views/"
		p:suffix=".jsp"/>
	<!-- 文件上传 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 解析request的编码 ，Default is ISO-8859-1 -->
		<property name="defaultEncoding" value="UTF-8" />
		<!-- 设置最大允许的大小(字节)。-1表示没有限制(默认) 1024*1024*10=10MB -->
		<property name="maxUploadSize" value="1048576000" />
		<!--被允许的最大的内存的大小，Default is 10240 bytes -->
		<property name="maxInMemorySize" value="20480" />
		<!-- 一个类似懒加载的属性.可以定义该属性.让解析文件的时候再抛异常,然后Controller中定义异常处理的方法 -->
		<property name="resolveLazily" value="true" />
	</bean>
	<mvc:resources location="/resources/" mapping="/resources/**" />
	<mvc:resources location="/static/" mapping="/static/**" />
	<mvc:resources location="/views/main/cms/" mapping="/main/cms/**" />
	<mvc:resources location="/views/main/qpd/" mapping="/main/qpds/**"/>
	<!--定义异常处理页面-->
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="java.sql.SQLException">exception/outException</prop>
                <prop key="java.io.IOException">exception/outException</prop>
                <prop key="java.lang.Exception">exception/outException</prop>
            </props>
        </property>
    </bean>
</beans>
