<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hibo.cms.shop.dao.BuildingBasMapper" >
  <resultMap id="BaseResultMap" type="com.hibo.cms.shop.model.BuildingBas" >
    <id column="building_id" property="buildingId" jdbcType="VARCHAR" />
    <result column="building_no" property="buildingNo" jdbcType="VARCHAR" />
    <result column="block_id" property="blockId" jdbcType="VARCHAR" />
    <result column="building_name" property="buildingName" jdbcType="VARCHAR" />
    <result column="building_logo" property="buildingLogo" jdbcType="VARCHAR" />
    <result column="idx" property="idx" jdbcType="INTEGER" />
    <result column="availabe" property="availabe" jdbcType="BIT" />
    <result column="operator" property="operator" jdbcType="VARCHAR" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="modify_date" property="modifyDate" jdbcType="TIMESTAMP" />
    <result column="tour_img" property="tourImg" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    building_id, building_no, block_id, building_name, building_logo, idx, availabe, 
    operator, create_date, modify_date,tour_img
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from bas_building
    where building_id = #{buildingId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from bas_building
    where building_id = #{buildingId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.hibo.cms.shop.model.BuildingBas" >
    insert into bas_building (building_id, building_no, block_id, 
      building_name, building_logo, idx, 
      availabe, operator, create_date, 
      modify_date,tour_img)
    values (#{buildingId,jdbcType=VARCHAR}, #{buildingNo,jdbcType=VARCHAR}, #{blockId,jdbcType=VARCHAR}, 
      #{buildingName,jdbcType=VARCHAR}, #{buildingLogo,jdbcType=VARCHAR}, #{idx,jdbcType=INTEGER}, 
      #{availabe,jdbcType=BIT}, #{operator,jdbcType=VARCHAR}, #{createDate,jdbcType=TIMESTAMP}, 
      #{modifyDate,jdbcType=TIMESTAMP},#{tourImg,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.hibo.cms.shop.model.BuildingBas" >
    insert into bas_building
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="buildingId != null" >
        building_id,
      </if>
      <if test="buildingNo != null" >
        building_no,
      </if>
      <if test="blockId != null" >
        block_id,
      </if>
      <if test="buildingName != null" >
        building_name,
      </if>
      <if test="buildingLogo != null" >
        building_logo,
      </if>
      <if test="idx != null" >
        idx,
      </if>
      <if test="availabe != null" >
        availabe,
      </if>
      <if test="operator != null" >
        operator,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="modifyDate != null" >
        modify_date,
      </if>
      <if test="tourImg != null" >
        tour_img,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="buildingId != null" >
        #{buildingId,jdbcType=VARCHAR},
      </if>
      <if test="buildingNo != null" >
        #{buildingNo,jdbcType=VARCHAR},
      </if>
      <if test="blockId != null" >
        #{blockId,jdbcType=VARCHAR},
      </if>
      <if test="buildingName != null" >
        #{buildingName,jdbcType=VARCHAR},
      </if>
      <if test="buildingLogo != null" >
        #{buildingLogo,jdbcType=VARCHAR},
      </if>
      <if test="idx != null" >
        #{idx,jdbcType=INTEGER},
      </if>
      <if test="availabe != null" >
        #{availabe,jdbcType=BIT},
      </if>
      <if test="operator != null" >
        #{operator,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyDate != null" >
        #{modifyDate,jdbcType=TIMESTAMP},
      </if>
      <if test="tourImg != null" >
        #{tourImg,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.hibo.cms.shop.model.BuildingBas" >
    update bas_building
    <set >
      <if test="buildingNo != null" >
        building_no = #{buildingNo,jdbcType=VARCHAR},
      </if>
      <if test="blockId != null" >
        block_id = #{blockId,jdbcType=VARCHAR},
      </if>
      <if test="buildingName != null" >
        building_name = #{buildingName,jdbcType=VARCHAR},
      </if>
      <if test="buildingLogo != null" >
        building_logo = #{buildingLogo,jdbcType=VARCHAR},
      </if>
      <if test="idx != null" >
        idx = #{idx,jdbcType=INTEGER},
      </if>
      <if test="availabe != null" >
        availabe = #{availabe,jdbcType=BIT},
      </if>
      <if test="operator != null" >
        operator = #{operator,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyDate != null" >
        modify_date = #{modifyDate,jdbcType=TIMESTAMP},
      </if>
      <if test="tourImg != null" >
        tour_img = #{tourImg,jdbcType=VARCHAR},
      </if>
    </set>
    where building_id = #{buildingId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hibo.cms.shop.model.BuildingBas" >
    update bas_building
    set building_no = #{buildingNo,jdbcType=VARCHAR},
      block_id = #{blockId,jdbcType=VARCHAR},
      building_name = #{buildingName,jdbcType=VARCHAR},
      building_logo = #{buildingLogo,jdbcType=VARCHAR},
      idx = #{idx,jdbcType=INTEGER},
      availabe = #{availabe,jdbcType=BIT},
      operator = #{operator,jdbcType=VARCHAR},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      modify_date = #{modifyDate,jdbcType=TIMESTAMP},
      tour_img = #{tourImg,jdbcType=VARCHAR}
    where building_id = #{buildingId,jdbcType=VARCHAR}
  </update>
    <select id="selectAllAvailableByBlock" parameterType="java.lang.String" resultMap="BaseResultMap">
  	SELECT 
  	<include refid="Base_Column_List" />
  	FROM bas_building 
  	WHERE block_id = #{blockId,jdbcType=VARCHAR} 
  	AND availabe = 1 ORDER BY idx ASC;
  </select>
  
  <select id="selectAll" resultMap="BaseResultMap">
  	select
  	<include refid="Base_Column_List" />
    from bas_building
  </select>
  
  <select id="selectByCondition" resultMap="BaseResultMap">
  	select * from (
  	SELECT
	bu.building_id,
	bu.building_no,
	bb.block_name block_id,
	concat(concat(bd.disname,bb.block_name),bu.building_name) building_name,
	bu.building_logo,
	bu.idx,
	bu.availabe,
	bu.operator,
	bu.create_date,
	bu.modify_date,
	bu.tour_img
    FROM
	bas_building bu
    LEFT JOIN bas_block bb ON bu.block_id = bb.block_id
    LEFT JOIN bas_district bd ON bd.district=bb.district
    WHERE 1=1 ORDER BY  bu.idx
  	) a
    <where>
        <if test="wStr !=null">
    		${wStr}
    	</if>
    </where>
  </select>
  
  <select id="selectByName" resultMap="BaseResultMap" parameterType="java.lang.String" >
   SELECT
	bu.building_id,
	bu.building_no,
	bb.block_name block_id,
	concat(concat(bd.disname,bb.block_name),bu.building_name) building_name,
	bu.building_logo,
	bu.idx,
	bu.availabe,
	bu.operator,
	bu.create_date,
	bu.modify_date,
	bu.tour_img
    FROM
	bas_building bu
    LEFT JOIN bas_block bb ON bu.block_id = bb.block_id
    LEFT JOIN bas_district bd ON bd.district=bb.district
    WHERE bu.building_id = #{buildingId,jdbcType=VARCHAR} ORDER BY  bu.idx
  </select>
  
  <select id="selectAllName" resultMap="BaseResultMap" parameterType="java.lang.String" >
   SELECT
	bu.building_id,
	bu.building_no,
	bb.block_name block_id,
	concat(concat(bd.disname,bb.block_name),bu.building_name) building_name,
	bu.building_logo,
	bu.idx,
	bu.availabe,
	bu.operator,
	bu.create_date,
	bu.modify_date,
	bu.tour_img
    FROM
	bas_building bu
    LEFT JOIN bas_block bb ON bu.block_id = bb.block_id
    LEFT JOIN bas_district bd ON bd.district=bb.district
    WHERE 1=1 ORDER BY  bu.idx
  </select>
  
</mapper>