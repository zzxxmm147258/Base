<?xml version="1.0" encoding="UTF-8"?>
<tabledef>
	<tables>
	<!-- 
		字段类型规定：其他字段类型尽量少用，使用时跟组长先商量
		字符串类型什么：VARCHAR、TEXT、BLOB
		整体使用：INT、SMALLINT
		浮点数值：DECIMAL
		日期类型：DATE、DATETIME
	 -->
	 <!-- 
	 	oracle 表空间
	 	HB_SYSDATA     数据表空间
	 	HB_SYSINDEX    索引表空间
	 	HB_XXXDATA     XXX系统数据表空间    XXX使用有系统代号
	 	HB_XXXINDEX    XXX系统索引表空间
	  -->TABLESPACE
		<!--
		<table name="表名" charset="utf8mb4" comment="表名描述" tblspace="oracle表空间名" indspace="oracle索引表空间" >
			<field name="字段名" type="类型" size="长度" decimal="小数位" unsigned="Y/N,默认N，数值数据是否有符号" primarykey="主键/非主键(Y/N)，默认非主键" isnull="非空/空(Y/N)，默认空" drop="Y/N,默认N，Y表示删除" default="数据库缺省值" refdes="表名:字段，只作为关联名注释用" comment="字段说明"/>
			<index name="索引名" fields="索引字段，可以多个，用，分隔" only="是否唯一索引(Y/N)" collate="utf8mb4_unicode_ci" storegrp="oracle表名间名" mysql="MySql是否建此索引(Y/N)，默认不建" comment="索引说明"/>
		</table>

		<table name="hb_test" comment="测试">
			<field name="id" type="varchar" size="32" primarykey="Y" comment="主键"/>
			<field name="createDate" type="datetime" comment="创建日期"/>
			<field name="modifyDate" type="datetime" comment="修改时候"/>
		</table>
		
		字段名，小写，单词之间用  _  分隔
		-->
	</tables>
	<refdefs COMMENT="表关联定义">
		<!-- 
		<ref table1="关联表名1" table2="关联表名2" name="关联名称" field1="表名1中的字段名" field2="表名2中的字段名"/>
		 -->
	</refdefs>
	
	<!--
		数字列类型 int、bigint、smallint、tinyint 
		　　数字列类型用于储存各种数字数据，如价格、年龄或者数量。数字列类型主要分为两种：整数型和浮点型。所有的数字列类型都允许有两个选项：UNSIGNED和ZEROFILL。选择UNSIGNED的列不允许有负数，选择了ZEROFILL的列会为数值添加零。下面是MySQL中可用的数字列类型 
		• TINYINT——一个微小的整数，支持 -128到127(SIGNED)，0到255(UNSIGNED)，需要1个字节存储 
		• BIT——同TINYINT(1) 
		• BOOL——同TINYINT(1) 
		• SMALLINT——一个小整数，支持 -32768到32767(SIGNED)，0到65535(UNSIGNED)，需要2个字节存储 
		• MEDIUMINT——一个中等整数，支持 -8388608到8388607(SIGNED)，0到16777215(UNSIGNED)，需要3个字节存储 
		• INT——一个整数，支持 -2147493648到2147493647(SIGNED)，0到4294967295(UNSIGNED)，需要4个字节存储 
		• INTEGER——同INT 
		• BIGINT——一个大整数，支持 -9223372036854775808到9223372036854775807(SIGNED)，0到18446744073709551615(UNSIGNED)，需要8个字节存储 
		• FLOAT(precision)——一个浮点数。precision<=24用于单精度浮点数；precision在25和53之间，用于又精度浮点数。FLOAT(X)与相诮的FLOAT和DOUBLE类型有差相同的范围，但是没有定义显示尺寸和小数位数。在MySQL3.23之前，这不是一个真的浮点值，且总是有两位小数。MySQL中的所有计算都用双精度，所以这会带来一些意想不到的问题。 
		• FLOAT——一个小的菜单精度浮点数。支持 -3.402823466E+38到-1.175494351E-38，0和1.175494351E-38 to 3.402823466E+38，需要4个字节存储。如果是UNSIGNED，正数的范围保持不变，但负数是不允许的。 
		• DOUBLE——一个双精度浮点数。支持 -1.7976931348623157E+308到-2.2250738585072014E-308，0和2.2250738585072014E-308到1.7976931348623157E+308。如果是FLOAT，UNSIGNED不会改变正数范围，但负数是不允许的。 
		• DOUBLE PRECISION——同DOUBLE 
		• REAL——同DOUBLE 
		• DECIMAL——将一个数像字符串那样存储，每个字符占一个字节 
		• DEC——同DECIMAL 
		• NUMERIC——同DECIMAL 
		
		字符串列类型:char、varchar、nvarchar 
		　　字符串列类型用于存储任何类型的字符数据，如名字、地址或者报纸文章。下面是MySQL中可用的字符串列类型 
		• CHAR——字符。固定长度的字串，在右边补齐空格，达到指定的长度。支持从0到155个字符。搜索值时，后缀的空格将被删除。 
		• VARCHAR ——可变长的字符。一个可变长度的字串，其中的后缀空格在存储值时被删除。支持从0到255字符 
		• TINYBLOB——微小的二进制对象。支持255个字符。需要长度+1字节的存储。与TINYTEXT一样，只不过搜索时是区分大小写的。(0.25KB) 
		• TINYTEXT——支持255个字符。要求长度+1字节的存储。与TINYBLOB一样，只不过搜索时会忽略大小写。(0.25KB) 
		• BLOB——二进制对象。支持65535个字符。需要长度+2字节的存储。 (64KB) 
		• TEXT——支持65535个字符。要求长度+2字节的存储。 (64KB) 
		• MEDIUMBLOB——中等大小的二进制对象。支持16777215个字符。需要长度+3字节的存储。 (16M) 
		• MEDIUMTEXT——支持16777215个字符。需要长度+3字节的存储。 (16M) 
		• LONGBLOB——大的的二进制对象。支持4294967295个字符。需要长度+4字节的存储。 (4G) 
		• LONGTEXT——支持4294967295个字符。需要长度+4字节的存储。(4G) 
		• ENUM——枚举。只能有一个指定的值，即NULL或""，最大有65535个值 
		• SET——一个集合。可以有0到64个值，均来自于指定清单. 
		
		
		
		日期和时间列类型 
		　　日期和时间列类型用于处理时间数据，可以存储当日的时间或出生日期这样的数据。格式的规定：Y表示年、M（前M）表示月、D表示日、H表示小时、M（后M）表示分钟、S表示秒。下面是MySQL中可用的日期和时间列类型 
		• DATETIME——格式：'YYYY-MM-DD HH:MM:SS'，范围：'1000-01-01 00:00:00'到'9999-12-31 23:59:59' 
		• DATE——格式：'YYYY-MM-DD'，范围：'1000-01-01'到'9999-12-31' 
		• TIMESTAMP——格式：'YYYYMMDDHHMMSS'、'YYMMDDHHMMSS'、'YYYYMMDD'、'YYMMDD'，范围：'1970-01-01 00:00:00'到'2037-01-01 00:00:00' 
		• TIME——格式：'HH:MM:SS' 
		• YEAR——格式：'YYYY，范围：'1901'到'2155'  
	 -->
</tabledef>